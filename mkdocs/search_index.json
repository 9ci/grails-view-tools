{
    "docs": [
        {
            "location": "/",
            "text": "Description\n\n\nAPI Documentation can be found here \nhttps://yakworks.github.io/view-tools/api\n\n\nutility helpers to locate views in the spring mvc context\n- \nViewResourceLocator\n for locating views in grails-app/views, plugins, and custom external paths.\n- \nGrailsWebEnvironment\n for binding a mock request if one doesn't exist so that services can operate without a controller.\n\n\nUsed to locate View resources whether in development or WAR deployed mode from static\nresources, custom resource loaders and binary plugins.\nLoads from a local grails-app folder for dev and from WEB-INF in\ndevelopment mode.\n\n\nInstall\n\n\nGrails 3\n\n\ncompile org.grails.plugins:view-tools:0.9-grails3\n\n\n\nGrails 2\n\n\ncompile :view-tools:0.3-grails2\n\n\n\nViewResourceLocator\n\n\nExample Bean\n\n\nviewResourceLocator\n(\ngrails\n.\nplugin\n.\nviewtools\n.\nViewResourceLocator\n)\n \n{\n \nbean\n \n-\n\n    \n//initial searchLocations\n\n    \nsearchLocations\n \n=\n \n[\n\n        \nclasspath:templates/\n,\n \n// consistent with spring-boot defaults\n\n        \nfile:/someLoc/my-templates/\n\n    \n]\n \n\n    \nsearchBinaryPlugins\n \n=\n \nfalse\n \n//whether to look in binary plugins, does not work in grails2\n\n\n    \n// in dev mode there will be a groovyPageResourceLoader \n\n    \n// with base dir set to the running project\n\n    \n//if(Environment.isDevelopmentEnvironmentAvailable()) \n- better for Grails 3\n\n    \nif\n(!\napplication\n.\nwarDeployed\n){\n \n// \n- grails2\n\n        \nresourceLoader\n \n=\n \nref\n(\ngroovyPageResourceLoader\n)\n \n//adds to list, does not replace\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nResource locate(String uri)\n : is the primary method and is used to find a view resource for a path. For example /foo/bar.xyz will search for /WEB-INF/grails-app/views/foo/bar.xyz in production and grails-app/views/foo/bar.xyz at development time. It also uses the the controller if called from a plugin to figure out where its located and finally does a brute force locate. Most of the logic is based on and uses what Grail's DefaultGroovyPageLocator does.\n\n\nResource getResource(String uri)\n : also implements Springs \nResourceLoader\n interface. This method works like a normal ResoruceLoader and \nuri\n can start with the standard \nfile:, classpath:, etc\n\n\n\n\nGrailsWebEnvironment\n\n\nGrailsWebEnvironment.bindRequestIfNull() methods are the ones of interest.\nbased on the RenderEnvironment in grails-rendering and private class in grails-mail\nAll this does is bind a mock request and mock response is one doesn't exist\ndeals with setting the WrappedResponseHolder.wrappedResponse as well\nYou will need the spring test lib on your main compile\n\ncompile \norg.springframework:spring-test\n\n\nExample App\n\n\nsee \nhttps://github.com/yakworks/view-tools/tree/master/test-projects/app\n\nIt contains a number of examples as well as a simple spring based viewResolver that uses ViewResourceLocator to find the template files it needs.",
            "title": "Overview"
        },
        {
            "location": "/#description",
            "text": "API Documentation can be found here  https://yakworks.github.io/view-tools/api  utility helpers to locate views in the spring mvc context\n-  ViewResourceLocator  for locating views in grails-app/views, plugins, and custom external paths.\n-  GrailsWebEnvironment  for binding a mock request if one doesn't exist so that services can operate without a controller.  Used to locate View resources whether in development or WAR deployed mode from static\nresources, custom resource loaders and binary plugins.\nLoads from a local grails-app folder for dev and from WEB-INF in\ndevelopment mode.",
            "title": "Description"
        },
        {
            "location": "/#install",
            "text": "Grails 3  compile org.grails.plugins:view-tools:0.9-grails3  Grails 2  compile :view-tools:0.3-grails2",
            "title": "Install"
        },
        {
            "location": "/#viewresourcelocator",
            "text": "Example Bean  viewResourceLocator ( grails . plugin . viewtools . ViewResourceLocator )   {   bean   - \n     //initial searchLocations \n     searchLocations   =   [ \n         classpath:templates/ ,   // consistent with spring-boot defaults \n         file:/someLoc/my-templates/ \n     ]  \n\n     searchBinaryPlugins   =   false   //whether to look in binary plugins, does not work in grails2 \n\n     // in dev mode there will be a groovyPageResourceLoader  \n     // with base dir set to the running project \n     //if(Environment.isDevelopmentEnvironmentAvailable())  - better for Grails 3 \n     if (! application . warDeployed ){   //  - grails2 \n         resourceLoader   =   ref ( groovyPageResourceLoader )   //adds to list, does not replace \n     }  }    Resource locate(String uri)  : is the primary method and is used to find a view resource for a path. For example /foo/bar.xyz will search for /WEB-INF/grails-app/views/foo/bar.xyz in production and grails-app/views/foo/bar.xyz at development time. It also uses the the controller if called from a plugin to figure out where its located and finally does a brute force locate. Most of the logic is based on and uses what Grail's DefaultGroovyPageLocator does.  Resource getResource(String uri)  : also implements Springs  ResourceLoader  interface. This method works like a normal ResoruceLoader and  uri  can start with the standard  file:, classpath:, etc",
            "title": "ViewResourceLocator"
        },
        {
            "location": "/#grailswebenvironment",
            "text": "GrailsWebEnvironment.bindRequestIfNull() methods are the ones of interest.\nbased on the RenderEnvironment in grails-rendering and private class in grails-mail\nAll this does is bind a mock request and mock response is one doesn't exist\ndeals with setting the WrappedResponseHolder.wrappedResponse as well\nYou will need the spring test lib on your main compile compile  org.springframework:spring-test",
            "title": "GrailsWebEnvironment"
        },
        {
            "location": "/#example-app",
            "text": "see  https://github.com/yakworks/view-tools/tree/master/test-projects/app \nIt contains a number of examples as well as a simple spring based viewResolver that uses ViewResourceLocator to find the template files it needs.",
            "title": "Example App"
        },
        {
            "location": "/app-resources/",
            "text": "AppResourceLoader provides a consistent and convention based way to lookup File system resources.\n\n\nConfiguration\n\n\nBasic configuration\n\n\nnine\n \n{\n\n    \nresources\n \n{\n\n\n        \ncurrentTenant\n \n=\n \n{\n \nreturn\n \n[\nid:\n1\n,\n \nnum:\ntenant-name\n]}\n\n\n        \nattachments\n.\nlocation\n \n=\n \nattachments\n\n\n        \nrootLocation\n \n=\n \n{\n \nargs\n \n-\n\n            \nFile\n \nfile\n \n=\n \nnew\n \nFile\n(\n/projectname/rootLocation\n)\n\n            \nif\n(!\nfile\n.\nexists\n())\n \n{\n\n                \nfile\n.\nmkdirs\n()\n\n            \n}\n\n            \nreturn\n \nfile\n.\ncanonicalPath\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\nDefining root location\n\n\nAppResources needs root location directory to be defined and should exist.\n\n\nThe Root Location can be defined as a closure that returns path to the directory as shown below.\n\n\nrootLocation\n \n=\n \n{\n \nargs\n \n-\n\n    \nreturn\n \n/projectname/rootLocation\n\n\n}\n\n\n\n\n\nThe closure is passed a map as argument containing keys \ntenantId\n and \ntenantSubDomain\n.\n\n\nDefining currentTenant\n\n\n    \ncurrentTenant\n \n=\n \n{\n \nreturn\n \n[\nid:\n1\n,\n \nnum:\ntenant-name\n]}\n    \n\n\n\nThis is also a closure and can return dynamic value based on some criteria.\nThe closure can return a map or any object which has \nid\n and \nnum\n properties.\nThis values are passed as tenantId and tenantSubDomain when retrieving the value of root location.\n\n\nAttachments\n\n\nApp resources provides utilities for storing and retrieving attachments.\n\n\nDeclare attachments.location as a subdirectory under root location\n\n\n    \nattachments\n.\nlocation\n \n=\n \nattachments\n\n\n\n\n\nCreate an attachment\n\n\n    \nappResourceLoader\n.\ncreateAttachmentFile\n(\nLong\n \nattachmentId\n,\n \nString\n \nname\n,\n \nString\n \nextension\n,\n \ndata\n)\n\n\n\n\nThe data can be either a file a String, or a byte array\n\n\nAccessing a directory under root location\n\n\n    \nFile\n \ndirectory\n \n=\n \nappResourceLoader\n.\ngetLocation\n(\nkey\n)\n\n\n\nHere key is the config key, eg (attachments.location or views.location)\n\n\nTemporary Files\n\nApp resource service provides helper method to create temporary files.\n\n \nappResourceLoader\n.\ncreateTempFile\n()\n \n\n\nBy default the temporary files are stored in system temp directory.\nHowever location of tempDir can be changed in configuration as shown below.\n\n\nnine\n.\nresources\n.\ntempDir\n \n=\n \n/path/to/dir\n\n\n\n\n\nNote:\n OS takes care of cleaning system temp directory, however if you explicitly specify the location of tempDir then you will need to take care of cleaning up the temp files regularly.\n\n\nConfigKeyAppResourceLoader\n\n\nConfigKeyAppResourceLoader provides ability to load resources from a directory configured as app resource location.\n\n\nDefine ConfigKeyAppResourceLoader as a bean in grails-app/conf/spring/resources.groovy\n\n\n    \nviewResourceLocator\n(\ngrails\n.\nplugin\n.\nviewtools\n.\nViewResourceLocator\n)\n \n{\n \nbean\n \n-\n\n        \nsearchPaths\n \n=\n \n[]\n\n        \nsearchLoaders\n \n=\n \n[\nref\n(\nconfigKeyAppResourceLoader\n)]\n\n\n        \nsearchBinaryPlugins\n \n=\n \ntrue\n \n//whether to look in binary plugins, does not work in grails2\n\n        \nscanAllPluginsWhenNotFound\n \n=\n \nfalse\n\n\n    \n}\n\n\n    \nconfigKeyAppResourceLoader\n(\nConfigKeyAppResourceLoader\n)\n \n{\n\n        \nbaseAppResourceKey\n \n=\n \nviews.location\n\n        \nappResourceLoader\n \n=\n \nref\n(\nappResourceLoader\n)\n\n    \n}\n\n\n\n\n\nDefine views.location app resource directory\n\n\nnine\n \n{\n\n    \nresources\n \n{\n\n        \nviews\n.\nlocation\n \n=\n \nviews\n\n    \n}\n\n\n}\n\n\n\n\n\nNow the views can be stored under root-location/views directory, and it will be picked up.",
            "title": "App Resources"
        },
        {
            "location": "/app-resources/#configuration",
            "text": "Basic configuration  nine   { \n     resources   { \n\n         currentTenant   =   {   return   [ id: 1 ,   num: tenant-name ]} \n\n         attachments . location   =   attachments \n\n         rootLocation   =   {   args   - \n             File   file   =   new   File ( /projectname/rootLocation ) \n             if (! file . exists ())   { \n                 file . mkdirs () \n             } \n             return   file . canonicalPath \n         } \n     }  }   Defining root location  AppResources needs root location directory to be defined and should exist.  The Root Location can be defined as a closure that returns path to the directory as shown below.  rootLocation   =   {   args   - \n     return   /projectname/rootLocation  }   The closure is passed a map as argument containing keys  tenantId  and  tenantSubDomain .  Defining currentTenant       currentTenant   =   {   return   [ id: 1 ,   num: tenant-name ]}       This is also a closure and can return dynamic value based on some criteria.\nThe closure can return a map or any object which has  id  and  num  properties.\nThis values are passed as tenantId and tenantSubDomain when retrieving the value of root location.  Attachments  App resources provides utilities for storing and retrieving attachments.  Declare attachments.location as a subdirectory under root location       attachments . location   =   attachments   Create an attachment       appResourceLoader . createAttachmentFile ( Long   attachmentId ,   String   name ,   String   extension ,   data )   The data can be either a file a String, or a byte array  Accessing a directory under root location       File   directory   =   appResourceLoader . getLocation ( key )  \nHere key is the config key, eg (attachments.location or views.location)  Temporary Files \nApp resource service provides helper method to create temporary files.   appResourceLoader . createTempFile ()   \nBy default the temporary files are stored in system temp directory.\nHowever location of tempDir can be changed in configuration as shown below.  nine . resources . tempDir   =   /path/to/dir   Note:  OS takes care of cleaning system temp directory, however if you explicitly specify the location of tempDir then you will need to take care of cleaning up the temp files regularly.  ConfigKeyAppResourceLoader  ConfigKeyAppResourceLoader provides ability to load resources from a directory configured as app resource location.  Define ConfigKeyAppResourceLoader as a bean in grails-app/conf/spring/resources.groovy       viewResourceLocator ( grails . plugin . viewtools . ViewResourceLocator )   {   bean   - \n         searchPaths   =   [] \n         searchLoaders   =   [ ref ( configKeyAppResourceLoader )] \n\n         searchBinaryPlugins   =   true   //whether to look in binary plugins, does not work in grails2 \n         scanAllPluginsWhenNotFound   =   false \n\n     } \n\n     configKeyAppResourceLoader ( ConfigKeyAppResourceLoader )   { \n         baseAppResourceKey   =   views.location \n         appResourceLoader   =   ref ( appResourceLoader ) \n     }   Define views.location app resource directory  nine   { \n     resources   { \n         views . location   =   views \n     }  }   Now the views can be stored under root-location/views directory, and it will be picked up.",
            "title": "Configuration"
        }
    ]
}